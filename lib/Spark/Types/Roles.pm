use strict;
use warnings;

package Spark::Types::Roles;
{
  $Spark::Types::Roles::VERSION = '0.1.0';
}

# ABSTRACT: MooseX::Types for all Spark Roles

# NOTE: This file is generated from the template Spark_Types_Roles.pm.tpl
# DO NOT EDIT THIS FILE.
# Last generated at Thu Aug 25 09:33:06 2011

use MooseX::Types -declare => [qw(
      SparkContainer
      SparkField
      SparkFieldNamed
      SparkFieldValidates
      SparkForm
      SparkFormFieldRoleNewValidator
      SparkFormFieldRolePrintable
      SparkFormFieldRolePrintableHTML
      SparkFormFieldRolePrintableXHTML
      SparkFormFieldValidator
      SparkFormPrinter
      SparkFormPrinterHTML
      SparkFormPrinterXHTML
      SparkFormRoleErrorStore
      SparkFormRoleValidity
      SparkFormSource
      SparkLabelled
      SparkNamed
      SparkNode
      SparkObject
      SparkParent
      SparkRenderer
      SparkRendererContainer
      SparkRenders
      SparkSimpleField
      SparkSimpleForm
      SparkSimpleNode
      SparkValidates
      SparkValidator
      )];
use namespace::autoclean;


role_type SparkContainer, {
    role    => 'Spark::Container',
    message => sub {
        return qq{$_ is not of role "Spark::Container"};
    },
};


role_type SparkField, {
    role    => 'Spark::Field',
    message => sub {
        return qq{$_ is not of role "Spark::Field"};
    },
};


role_type SparkFieldNamed, {
    role    => 'Spark::Field::Named',
    message => sub {
        return qq{$_ is not of role "Spark::Field::Named"};
    },
};


role_type SparkFieldValidates, {
    role    => 'Spark::Field::Validates',
    message => sub {
        return qq{$_ is not of role "Spark::Field::Validates"};
    },
};


role_type SparkForm, {
    role    => 'Spark::Form',
    message => sub {
        return qq{$_ is not of role "Spark::Form"};
    },
};


role_type SparkFormFieldRoleNewValidator, {
    role    => 'Spark::Form::Field::Role::NewValidator',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Field::Role::NewValidator"};
    },
};


role_type SparkFormFieldRolePrintable, {
    role    => 'Spark::Form::Field::Role::Printable',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Field::Role::Printable"};
    },
};


role_type SparkFormFieldRolePrintableHTML, {
    role    => 'Spark::Form::Field::Role::Printable::HTML',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Field::Role::Printable::HTML"};
    },
};


role_type SparkFormFieldRolePrintableXHTML, {
    role    => 'Spark::Form::Field::Role::Printable::XHTML',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Field::Role::Printable::XHTML"};
    },
};


role_type SparkFormFieldValidator, {
    role    => 'Spark::Form::Field::Validator',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Field::Validator"};
    },
};


role_type SparkFormPrinter, {
    role    => 'Spark::Form::Printer',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Printer"};
    },
};


role_type SparkFormPrinterHTML, {
    role    => 'Spark::Form::Printer::HTML',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Printer::HTML"};
    },
};


role_type SparkFormPrinterXHTML, {
    role    => 'Spark::Form::Printer::XHTML',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Printer::XHTML"};
    },
};


role_type SparkFormRoleErrorStore, {
    role    => 'Spark::Form::Role::ErrorStore',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Role::ErrorStore"};
    },
};


role_type SparkFormRoleValidity, {
    role    => 'Spark::Form::Role::Validity',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Role::Validity"};
    },
};


role_type SparkFormSource, {
    role    => 'Spark::Form::Source',
    message => sub {
        return qq{$_ is not of role "Spark::Form::Source"};
    },
};


role_type SparkLabelled, {
    role    => 'Spark::Labelled',
    message => sub {
        return qq{$_ is not of role "Spark::Labelled"};
    },
};


role_type SparkNamed, {
    role    => 'Spark::Named',
    message => sub {
        return qq{$_ is not of role "Spark::Named"};
    },
};


role_type SparkNode, {
    role    => 'Spark::Node',
    message => sub {
        return qq{$_ is not of role "Spark::Node"};
    },
};


role_type SparkObject, {
    role    => 'Spark::Object',
    message => sub {
        return qq{$_ is not of role "Spark::Object"};
    },
};


role_type SparkParent, {
    role    => 'Spark::Parent',
    message => sub {
        return qq{$_ is not of role "Spark::Parent"};
    },
};


role_type SparkRenderer, {
    role    => 'Spark::Renderer',
    message => sub {
        return qq{$_ is not of role "Spark::Renderer"};
    },
};


role_type SparkRendererContainer, {
    role    => 'Spark::Renderer::Container',
    message => sub {
        return qq{$_ is not of role "Spark::Renderer::Container"};
    },
};


role_type SparkRenders, {
    role    => 'Spark::Renders',
    message => sub {
        return qq{$_ is not of role "Spark::Renders"};
    },
};


role_type SparkSimpleField, {
    role    => 'Spark::Simple::Field',
    message => sub {
        return qq{$_ is not of role "Spark::Simple::Field"};
    },
};


role_type SparkSimpleForm, {
    role    => 'Spark::Simple::Form',
    message => sub {
        return qq{$_ is not of role "Spark::Simple::Form"};
    },
};


role_type SparkSimpleNode, {
    role    => 'Spark::Simple::Node',
    message => sub {
        return qq{$_ is not of role "Spark::Simple::Node"};
    },
};


role_type SparkValidates, {
    role    => 'Spark::Validates',
    message => sub {
        return qq{$_ is not of role "Spark::Validates"};
    },
};


role_type SparkValidator, {
    role    => 'Spark::Validator',
    message => sub {
        return qq{$_ is not of role "Spark::Validator"};
    },
};

1;


=pod

=encoding utf-8

=head1 NAME

Spark::Types::Roles - MooseX::Types for all Spark Roles

=head1 VERSION

version 0.1.0

=head1 TYPES

=head2 SparkContainer

  does => 'Spark::Container'

=head2 SparkField

  does => 'Spark::Field'

=head2 SparkFieldNamed

  does => 'Spark::Field::Named'

=head2 SparkFieldValidates

  does => 'Spark::Field::Validates'

=head2 SparkForm

  does => 'Spark::Form'

=head2 SparkFormFieldRoleNewValidator

  does => 'Spark::Form::Field::Role::NewValidator'

=head2 SparkFormFieldRolePrintable

  does => 'Spark::Form::Field::Role::Printable'

=head2 SparkFormFieldRolePrintableHTML

  does => 'Spark::Form::Field::Role::Printable::HTML'

=head2 SparkFormFieldRolePrintableXHTML

  does => 'Spark::Form::Field::Role::Printable::XHTML'

=head2 SparkFormFieldValidator

  does => 'Spark::Form::Field::Validator'

=head2 SparkFormPrinter

  does => 'Spark::Form::Printer'

=head2 SparkFormPrinterHTML

  does => 'Spark::Form::Printer::HTML'

=head2 SparkFormPrinterXHTML

  does => 'Spark::Form::Printer::XHTML'

=head2 SparkFormRoleErrorStore

  does => 'Spark::Form::Role::ErrorStore'

=head2 SparkFormRoleValidity

  does => 'Spark::Form::Role::Validity'

=head2 SparkFormSource

  does => 'Spark::Form::Source'

=head2 SparkLabelled

  does => 'Spark::Labelled'

=head2 SparkNamed

  does => 'Spark::Named'

=head2 SparkNode

  does => 'Spark::Node'

=head2 SparkObject

  does => 'Spark::Object'

=head2 SparkParent

  does => 'Spark::Parent'

=head2 SparkRenderer

  does => 'Spark::Renderer'

=head2 SparkRendererContainer

  does => 'Spark::Renderer::Container'

=head2 SparkRenders

  does => 'Spark::Renders'

=head2 SparkSimpleField

  does => 'Spark::Simple::Field'

=head2 SparkSimpleForm

  does => 'Spark::Simple::Form'

=head2 SparkSimpleNode

  does => 'Spark::Simple::Node'

=head2 SparkValidates

  does => 'Spark::Validates'

=head2 SparkValidator

  does => 'Spark::Validator'

=head1 AUTHORS

=over 4

=item *

James Laver L<http://jameslaver.com>

=item *

Kent Fredric <kentnl@cpan.org>

=item *

Pawe≈Ç Murias <pawelmurias@gmail.com>

=item *

David Dorward <david@dorward.me.uk>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2011 by James Laver C<< <sprintf qw(%s@%s.%s cpan jameslaver com)> >>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut


__END__
